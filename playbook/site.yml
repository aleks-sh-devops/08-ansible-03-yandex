---
- name: Install Clickhouse
  hosts: clickhouse
  handlers:
    - name: Start clickhouse service
      become: true
      ansible.builtin.service:
        name: clickhouse-server
        state: restarted

  tasks:
    - block:
        - name: Get clickhouse distrib
          ansible.builtin.get_url:
            url: "https://packages.clickhouse.com/rpm/stable/{{ item }}-{{ clickhouse_version }}.noarch.rpm"
            dest: "./{{ item }}-{{ clickhouse_version }}.rpm"
          with_items: "{{ clickhouse_packages }}"
          tags:
            - clickhouse
      rescue:
        - name: Get clickhouse distrib
          ansible.builtin.get_url:
            url: "https://packages.clickhouse.com/rpm/stable/clickhouse-common-static-{{ clickhouse_version }}.x86_64.rpm"
            dest: "./clickhouse-common-static-{{ clickhouse_version }}.rpm"
          tags:
            - clickhouse

    - name: Install clickhouse packages
      become: true
      ansible.builtin.yum:
        name:
          - clickhouse-common-static-{{ clickhouse_version }}.rpm
          - clickhouse-client-{{ clickhouse_version }}.rpm
          - clickhouse-server-{{ clickhouse_version }}.rpm
      notify: Start clickhouse service
      tags:
        - clickhouse

    - name: Enable service clickhouse-server
      become: true
      ansible.builtin.service:
        name: clickhouse-server
        enabled: true
      tags:
        - clickhouse

    - name: Flush handlers
      meta: flush_handlers
      tags:
        - clickhouse

    - name: wait 10 sec
      ansible.builtin.pause:
        seconds: 10
      tags:
        - clickhouse

    - name: Create database
      ansible.builtin.command: "clickhouse-client -q 'create database logs;'"
      register: create_db
      failed_when: create_db.rc != 0 and create_db.rc !=82
      changed_when: create_db.rc == 0
      tags:
        - clickhouse

    - name: Create database2
      ansible.builtin.command: "clickhouse-client -q 'CREATE DATABASE nginxdb;'"
      register: create_db2
      failed_when: create_db2.rc != 0 and create_db.rc !=82
      changed_when: create_db2.rc == 0
      tags:
        - clickhouse

    - name: Create database3
      ansible.builtin.command: "clickhouse-client -q 'CREATE TABLE nginxdb.access_logs (message String) ENGINE = MergeTree() ORDER BY tuple();'"
      register: create_db3
      failed_when: create_db3.rc != 0 and create_db.rc !=82
      changed_when: create_db3.rc == 0
      tags:
        - clickhouse

- name: Install Vector
  hosts: vector
  handlers:
    - name: restart vector service
      become: true
      ansible.builtin.systemd:
        name: vector
        state: restarted
        daemon_reload: true

    - name: enable service Vector
      become: true
      ansible.builtin.service:
        name: vector
        enabled: true
      tags:
        - vector

  tasks:
    - name: Vector Install package
      become: true
      ansible.builtin.yum:
        name: https://packages.timber.io/vector/{{ vector_version }}/vector-{{ vector_version }}-1.{{ ansible_architecture }}.rpm
        state: present
      notify: enable service Vector
      tags:
        - vector

    - name: Configure Vector | Template config
      become: true
      ansible.builtin.template:
        src: /home/usrcon/08-ansible-03-yandex/playbook/templates/vector.toml.j2
        mode: 0644
        dest: "{{ vector_config_dir }}/vector.toml"
      notify: restart vector service
      tags:
        - vector

    - name: Flush handlers
      meta: flush_handlers
      tags:
        - vector


- name: Install nginx and ighthouse
  hosts: nginx-lighthouse-01
  handlers:
    - name: start nginx service
      become: true
      ansible.builtin.systemd:
        name: nginx
        enabled: true
        state: started
    - name: restart nginx service
      become: true
      ansible.builtin.systemd:
        name: nginx
        state: restarted
    - name: setenforce
      become: true
      command: setenforce 0

  tasks:
    - name: install epel-release
      become: true
      ansible.builtin.yum:
        name: epel-release
        state: present
      tags:
        - lighthouse

    - name: install nginx
      become: true
      ansible.builtin.yum:
        name: nginx
        state: present
      notify: start nginx service
      tags:
        - lighthouse

    - name: Disable SELinux
      become: true
      ansible.posix.selinux:
        state: disabled
      tags:
        - lighthouse
      notify: setenforce


    - name: Create a directory if it does not exist
      become: true
      ansible.builtin.file:
        path: "{{ lighthouse_location_dir }}"
        state: directory
        mode: '0755'
      tags:
        - lighthouse

    - name: install git
      become: true
      ansible.builtin.yum:
        name: git
        state: present
      tags:
        - lighthouse

    - name: copy lighthouse service from git
      become: true
      ansible.builtin.git:
        repo: "{{ lighthouse_repo }}"
        version: master
        dest: /tmp/lighthouse
      tags:
        - lighthouse

    - name: copy lighthouse files1 to nginx workdir
      become: true
      ansible.builtin.copy:
        src: "/tmp/lighthouse/{{ item }}"
        dest: "{{ lighthouse_location_dir }}"
        mode: '0644'
        remote_src: true
        follow: true
      loop:
        - js
        - app.js
        - index.html
        - jquery.js
      notify: restart nginx service
      tags:
        - lighthouse

    - name: copy lighthouse files2 to nginx workdir
      become: true
      ansible.builtin.copy:
        src: "/tmp/lighthouse/{{ item }}"
        dest: "{{ lighthouse_location_dir }}"
        mode: '0751'
        remote_src: true
        follow: true
      loop:
        - css
        - img
      notify: restart nginx service
      tags:
        - lighthouse

    - name: create lighthouse config
      become: true
      ansible.builtin.template:
        src: templates/lighthouse.conf.j2
        dest: /etc/nginx/conf.d/lighthouse.conf
        mode: '0644'
      notify: restart nginx service
      tags:
        - lighthouse
